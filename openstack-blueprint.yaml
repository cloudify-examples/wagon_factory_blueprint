tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-openstack-plugin/2.2.0/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.2.5/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-fabric-plugin/1.5/plugin.yaml
  - imports/cloud-config.yaml
  - imports/wagon.yaml

inputs:

  image:
    description: Image to be used when launching agent VMs
    default: { get_secret: centos_core_image }

  flavor:
    description: Flavor of the agent VMs
    default: { get_secret: large_image_flavor }

  agent_user:
    type: string
    default: 'centos' # change this for other distros

  use_existing_host:
    default: false

  host_resource_id:
    default: wagon_build_host

  port_resource_id:
    default: wagon_build_port

  group_resource_id:
    default: wagon_build_group

  ip_resource_id:
    default: wagon_build_ip

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: region }

node_templates:

  host:
    type: cloudify.openstack.nodes.Server
    properties:
      use_external_resource: { get_input: use_existing_host }
      resource_id: { get_input: host_resource_id }
      openstack_config: *openstack_config
      agent_config:
          user: { get_input: agent_user }
          install_method: remote
          port: 22
          key: { get_secret: agent_key_private }
      server:
        key_name: ''
        image: { get_input: image }
        flavor: { get_input: flavor }
      management_network_name: { get_property: [ public_network, resource_id ] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ host_requirements, cloud_config ] }
    relationships:
    - type: cloudify.openstack.server_connected_to_port
      target: port
    - type: cloudify.relationships.depends_on
      target: host_requirements

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
      use_external_resource: { get_input: use_existing_host }
      resource_id: { get_input: port_resource_id }
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_network
    - type: cloudify.relationships.depends_on
      target: public_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: ip

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_name }
    relationships:
    - target: public_network
      type: cloudify.relationships.contained_in

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: public_network_name }

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      use_external_resource: { get_input: use_existing_host }
      resource_id: { get_input: group_resource_id }
      security_group:
        name: security_group
        description: generic security group
      rules:
      - remote_ip_prefix: 0.0.0.0/0
        port: 22
      - remote_ip_prefix: 0.0.0.0/0
        port: { get_property: [ wagon, port ] }

  ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      use_external_resource: { get_input: use_existing_host }
      resource_id: { get_input: ip_resource_id }
      floatingip:
        floating_network_name: { get_secret: external_network_name }

outputs:
  wagon:
    value:
      concat:
      - "http://"
      - { get_attribute: [ ip, floating_ip_address ] }
      - ":"
      - { get_property: [ wagon, port ] }
      - '/'
      - { get_attribute: [ wagon, file ] }
